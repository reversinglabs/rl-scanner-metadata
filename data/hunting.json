{
    "TH15101": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "warning",
            "localization": [
                {
                    "label": "restricted application behaviors",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors that were marked to issue a warning.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. While most behaviors are commonly found in software, some can be intentionally declared as undesirable through the organization policy. This issue is reported for files exhibiting behaviors that were explicitly marked to issue a warning.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Review the audit section to better understand the organization security policy.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15102": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "restricted application behaviors",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors that were explicitly restricted.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. While most behaviors are commonly found in software, some can be intentionally restricted through the organization policy. This issue is reported for files exhibiting behaviors that were explicitly marked as restricted.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Review the audit section to better understand the organization security policy.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15103": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors commonly used by malicious software.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. While most behaviors are benign, some are commonly abused by malicious software with the intent to cause harm. When a software package shares behavior traits with malicious software, it may become flagged by security solutions. Any detection from security solutions can cause friction for the end-users during software deployment. While the behavior is likely intended by the developer, there is a small chance this detection is true positive, and an early indication of a software supply chain attack.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software intent does not relate to the reported behavior, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15104": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malware-like behaviors found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors exclusively used by malicious software.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. While most behaviors are benign, some are exclusively used by malicious software with the intent to cause harm. When a software package matches behavior traits of malicious software, it becomes flagged by security solutions. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed.",
                            "type": "stop"
                        },
                        {
                            "content": "In the case this behavior is intended, rewrite the flagged code without using the malware-like behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15105": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malware-like behaviors found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors that match the hacktool malware profile.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. While most behaviors are benign, some are exclusively used by malicious software with the intent to cause harm. When a software package matches behavior traits of malicious software, it becomes flagged by security solutions. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider. Detected threat type matches the behaviors typically exhibited by the hacktool malware profile. Hacking tools are commonly used by malicious actors to bypass security solutions, exploit system weaknesses, collect personal information, and exfiltrate data. However, due to high-privilege access requirements, some security solutions may also trigger this detection when analyzed.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software intent does not relate to the reported behavior, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed.",
                            "type": "stop"
                        },
                        {
                            "content": "In the case this behavior is intended, rewrite the flagged code without using the malware-like behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15106": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malware-like behaviors found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors that match the backdoor malware profile.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. While most behaviors are benign, some are exclusively used by malicious software with the intent to cause harm. When a software package matches behavior traits of malicious software, it becomes flagged by security solutions. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider. Detected threat type matches the behaviors typically exhibited by the backdoor malware profile. Backdoors are commonly used by malicious actors to gain unauthorized access to exposed computer systems over the internet. However, due to high-privilege access requirements, some security solutions may also trigger this detection when analyzed.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software intent does not relate to the reported behavior, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed.",
                            "type": "stop"
                        },
                        {
                            "content": "In the case this behavior is intended, rewrite the flagged code without using the malware-like behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15107": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malware-like behaviors found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors that match the coinminer malware profile.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. While most behaviors are benign, some are exclusively used by malicious software with the intent to cause harm. When a software package matches behavior traits of malicious software, it becomes flagged by security solutions. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider. Detected threat type matches the behaviors typically exhibited by the coinminer malware profile. Coinminers are commonly used by financially motivated attackers to abuse available hardware resources of exposed computer systems for unauthorized cryptocurrency mining.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed.",
                            "type": "stop"
                        },
                        {
                            "content": "In the case this behavior is intended, rewrite the flagged code without using the malware-like behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15108": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malware-like behaviors found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors that match the infostealer malware profile.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. While most behaviors are benign, some are exclusively used by malicious software with the intent to cause harm. When a software package matches behavior traits of malicious software, it becomes flagged by security solutions. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider. Detected threat type matches the behaviors typically exhibited by the infostealer malware profile. Infostealers are commonly used to steal sensitive user data such as stored login details, financial information, and other personally identifiable information.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed.",
                            "type": "stop"
                        },
                        {
                            "content": "In the case this behavior is intended, rewrite the flagged code without using the malware-like behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15109": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malware-like behaviors found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors that match the keylogger malware profile.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. While most behaviors are benign, some are exclusively used by malicious software with the intent to cause harm. When a software package matches behavior traits of malicious software, it becomes flagged by security solutions. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider. Detected threat type matches the behaviors typically exhibited by the keylogger malware profile. Keyloggers monitor user keystrokes in real-time to collect, and optionally exfiltrate, sensitive information such as login details, chat messages, and other personal information.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed.",
                            "type": "stop"
                        },
                        {
                            "content": "In the case this behavior is intended, rewrite the flagged code without using the malware-like behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15110": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malware-like behaviors found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors that match the rootkit malware profile.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. While most behaviors are benign, some are exclusively used by malicious software with the intent to cause harm. When a software package matches behavior traits of malicious software, it becomes flagged by security solutions. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider. Detected threat type matches the behaviors typically exhibited by the rootkit malware profile. Rootkits are commonly used to access and tamper with high privilege areas of the operating system. Due to their unfettered access to sensitive system areas, rootkits are often used to hide running applications and changes to system settings from security audits.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed.",
                            "type": "stop"
                        },
                        {
                            "content": "In the case this behavior is intended, rewrite the flagged code without using the malware-like behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15401": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malicious author components",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components authored by known threat actors.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Software developers publish components they have authored to public repositories. Open source communities use code repositories to facilitate project discovery and simplify software deployment. However, anyone with an email account can join a community and start publishing code to public repositories. Vetting users before they join a community is usually not done by repository maintainers. That makes public repositories popular among threat actors. Detected software component was authored by an email address, or an identity, that is known to publish malicious code in public repositories.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider replacing the software component with an alternative.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15402": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components authored by high-risk developers.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Open source communities depend on the work of thousands of software developers that volunteer their time to maintain software components. While the majority of open source contributors are altruistic and trustworthy, some software developers have a history of making harmful changes to the projects they maintain. Changes that are considered harmful include destructive and disruptive actions, and other developer behaviors that might cause them to be considered untrustworthy in their community. Code written by these software developers should be put under higher degree of scrutiny, and continuously reviewed for unexpected changes.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should consider delaying the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider replacing the software component with an alternative.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15403": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "bug bounty components found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components authored by bug bounty researchers.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Open source communities depend on the work of thousands of software developers that volunteer their time to maintain software components. While the majority of open source contributors are altruistic and trustworthy, some software developers are also members of security research or bug bounty programs. Researchers that participate in bug bounty programs develop applications that leak sensitive environment information to prove that they've successfully bypassed security mechanisms. Code written by these software developers should be put under a higher degree of scrutiny, and their code should never appear in software packages intended for release.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing the software component.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15404": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components authored by developers with disposable email service accounts.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Open source communities depend on the work of thousands of software developers that volunteer their time to maintain software components. Software developers build up their reputation by being transparent. The person behind the public-facing alias is just as important as the alias itself. Developers rarely opt to use short-lived email service accounts that hide the link between their alias and the person behind it. Software components published by anonymized developer accounts often relate to activities that are unsuited for enterprise consumption.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should consider delaying the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider replacing the software component with an alternative.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15405": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "low",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components authored by developers with anonymous email service accounts.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Open source communities depend on the work of thousands of software developers that volunteer their time to maintain software components. Software developers build up their reputation by being transparent. The person behind the public-facing alias is just as important as the alias itself. Developers rarely opt to use anonymous email service accounts that hide the link between their alias and the person behind it. Software components published by anonymized developer accounts often relate to activities that are unsuited for enterprise consumption.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should consider delaying the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider replacing the software component with an alternative.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15501": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "warning",
            "localization": [
                {
                    "label": "suspicious application behaviors",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors similar to malicious packages published on PyPI.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. Python Package Index (PyPI) repository is often abused by threat actors to publish software packages that exhibit malicious behaviors. Malware authors use numerous tactics to lure developers into including malicious PyPI packages in their software projects. Most malicious packages published on PyPI target developers and their workstations. However, some are designed to activate only when deployed in the end-user environment. Both types of Python malicious packages are detected by proprietary ReversingLabs threat hunting algorithms. This detection method is considered proactive, and it is based on Machine Learning (ML) algorithms that can detect novel malware. The detection is strongly influenced by behaviors that software components exhibit. Behaviors similar to previously discovered malware and software supply chain attacks may cause some otherwise benign software packages to be detected by this policy.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software intent does not relate to the reported behavior, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH15502": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "warning",
            "localization": [
                {
                    "label": "suspicious application behaviors",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files with behaviors similar to malicious packages published on NPM.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. Node Package Manager (NPM) repository is often abused by threat actors to publish software packages that exhibit malicious behaviors. Malware authors use numerous tactics to lure developers into including malicious NPM packages in their software projects. Most malicious packages published on NPM target developers and their workstations. However, some are designed to activate only when deployed in the end-user environment. Both types of NodeJS malicious packages are detected by proprietary ReversingLabs threat hunting algorithms. This detection method is considered proactive, and it is based on Machine Learning (ML) algorithms that can detect novel malware. The detection is strongly influenced by behaviors that software components exhibit. Behaviors similar to previously discovered malware and software supply chain attacks may cause some otherwise benign software packages to be detected by this policy.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software intent does not relate to the reported behavior, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16101": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of obfuscated software components.",
                    "description": "Obfuscation is a process of mangling the software code legibility. Obfuscation can be applied to both the application source and its compiled code counterpart. In both cases, obfuscation can interfere with the accuracy of security and software quality assessment solutions. For this reason, obfuscation is a technique commonly used by malicious actors as a means of bypassing security solutions and avoiding detection. While presence of obfuscation does not imply malicious intent, all of its uses in a software package should be documented and approved. One example of acceptable use for code obfuscation is minimizing the size of script files that are not intended to be read by humans. In such a case, the trade-off between file size and code legibility is considered acceptable.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1027 - Obfuscated Files or Information.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider an alternative to code obfuscation to lower the risk of being mistakenly flagged by security solutions.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16102": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 4,
            "rl-level": null,
            "severity": "low",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing bidirectional Unicode control characters.",
                    "description": "Unicode is a text encoding standard designed to support the use of text written in all of the major languages and writing systems. While most languages are written from left to right, some are written in alternative directions. To accommodate encoding text written in such languages, the Unicode standard includes a number of special characters that allow the text direction to be specified. However, changing text direction can have adverse effects on how the encoded text is displayed and interpreted. For this reason, bidirectional Unicode control characters are commonly abused by malicious actors as a means of bypassing security solutions and avoiding detection. While presence of special Unicode characters does not imply malicious intent, all of its uses in a software package should be documented and approved. One example of acceptable use for these special characters is in script files that parse, validate, and transform Unicode-encoded text.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1036.002 - Masquerading: Right-to-Left Override.",
                            "type": "consult"
                        },
                        {
                            "content": "Consult publicly available materials on the Trojan Source vulnerability.",
                            "type": "consult"
                        }
                    ]
                }
            ]
        }
    },
    "TH16103": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files that dynamically execute Base-encoded data.",
                    "description": "Attackers commonly hide their malicious payloads in layers of packing and code obfuscation. Base-encoding is a common data transformation technique used to convert binary payloads into text. Detected software behaviors indicate that the code has the ability to decode and execute Base-encoded data. While presence of dynamic code execution does not imply malicious intent, all of its uses in a software package should be documented and approved. When a software package has behavior traits similar to malicious software, it may become flagged by security solutions. One example of acceptable use for dynamic Base-encoded data execution is transfer of software components over the network.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1027 - Obfuscated Files or Information.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16104": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files that dynamically execute compressed data.",
                    "description": "Attackers commonly hide their malicious payloads in layers of packing and code obfuscation. Compression is a common data transformation technique used to reduce binary data size. Detected software behaviors indicate that the code has the ability to execute data upon its decompression. While presence of dynamic code execution does not imply malicious intent, all of its uses in a software package should be documented and approved. When a software package has behavior traits similar to malicious software, it may become flagged by security solutions. One example of acceptable use for dynamic compressed data execution is transfer of software components over the network.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1027 - Obfuscated Files or Information.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16105": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files that use hex-encoded module import directive.",
                    "description": "Programming languages allow developers to extend functionality of their code by importing additional modules. Each programming language has their own way of achieving this, but it is common to declare reliance on external modules by using the import directive. This declaration is typically done at the source code level, where developers write the names of the modules their code requires. It is expected that names of external modules are written as regular, simple to understand text. However, some programming languages allow the names of external modules to be hex-encoded. This can be used as a form of code obfuscation. Due to this, the feature is commonly abused by attackers to confuse security tools and avoid detection. While presence of hex-encoded imports does not imply malicious intent, all of its uses in a software package should be documented and approved. One example of acceptable use for hex-encoded import directives is loading modules with non-ASCII names.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1027 - Obfuscated Files or Information.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider renaming the imported module names.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16106": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files that collect and exfiltrate user information.",
                    "description": "Software components contain executable code that performs actions implemented during its development. These actions are called behaviors. In the analysis report, behaviors are presented as human-readable descriptions that best match the underlying code intent. While most behaviors are benign on their own, some might become important for analysis when observed alongside other capabilities the component exhibits. This issue is reported for files that can enumerate user information and make HTTP requests. While presence of this behavior combination does not imply malicious intent, it is advised that the reported files are reviewed. One example of acceptable use for this type of data collection is the opt-in telemetry for software debugging purposes.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1033 - System Owner/User Discovery.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider limiting the collection of user information to a minimum.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16107": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files that embed a Base-encoded executable.",
                    "description": "Attackers commonly hide their malicious payloads in layers of packing and code obfuscation. Base-encoding is a common data transformation technique used to convert Windows executable files into textual payloads. Detected software behaviors indicate that the code has the ability to decode and execute Base-encoded executables. While presence of dynamic code execution does not imply malicious intent, all of its uses in a software package should be documented and approved. When a software package has behavior traits similar to malicious software, it may become flagged by security solutions. One example of acceptable use for embedding Base-encoded Windows executables is the intent to transfer the software components over the network.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1027 - Obfuscated Files or Information.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider an alternative delivery mechanism for software packages.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16108": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files that embed a raw encrypted executable file.",
                    "description": "Attackers commonly hide their malicious payloads in layers of packing and code obfuscation. Encryption is a common data transformation technique used to obfuscate the presence of Windows executable files. Detected software behaviors indicate that the code has the ability to execute executables once decrypted. While presence of dynamic code execution does not imply malicious intent, all of its uses in a software package should be documented and approved. When a software package has behavior traits similar to malicious software, it may become flagged by security solutions. One example of acceptable use for embedding raw encrypted Windows executables is the intent to install or deploy software components.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1027 - Obfuscated Files or Information.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider an alternative delivery mechanism for software packages.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16109": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files that embed a raw compressed executable file.",
                    "description": "Attackers commonly hide their malicious payloads in layers of packing and code obfuscation. Compression is a common data transformation technique used to reduce the file size of Windows executables. Detected software behaviors indicate that the code has the ability to execute decompressed executables. While presence of dynamic code execution does not imply malicious intent, all of its uses in a software package should be documented and approved. When a software package has behavior traits similar to malicious software, it may become flagged by security solutions. One example of acceptable use for embedding raw compressed Windows executables is the intent to install or deploy software components.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1027 - Obfuscated Files or Information.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider an alternative delivery mechanism for software packages.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16110": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of document file formats that embed an executable.",
                    "description": "Attackers commonly hide their malicious payloads in layers of packing and code obfuscation. Compression and encryption are common data transformation techniques used to hide the presence of Windows executables. Embedding Windows executables in product documentation is highly unusual, as this is an uncommon way to distribute software. While the presence of one or more executable files in a document does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Presence of documents that embed executables may cause the entire software package to become flagged by security solutions.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1027 - Obfuscated Files or Information.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider an alternative delivery mechanism for software packages.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16111": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can tamper with the machine power settings.",
                    "description": "Software components sometimes need to interact with higher privilege parts of the operating system, often requiring administrative access to accomplish a task. Machine power settings are high privilege functions that can change the power state of the device. This includes the ability to reboot and shutdown computer systems. Attackers often abuse machine power settings to force a system reboot, upon which malicious code can infect the system and gain persistence. While the presence of code that tampers with machine power settings does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that interact with the machine power state. One example of acceptable use for such functions is prompting users to reboot their system during complex software installations.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1529 - System Shutdown/Reboot.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16112": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can tamper with the system certificate stores.",
                    "description": "Software components sometimes need to interact with higher privilege parts of the operating system, often requiring administrative access to accomplish a task. System certificate stores are databases that define the chain of trust for a machine. These databases control the list of websites the machine can securely connect to, and the list of applications that the operating system implicitly trusts. For that reason, attackers often abuse system certificate stores to ensure their malicious code executes without being detected by security solutions. While the presence of code that tampers with system certificate stores does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that interact with system certificate stores. One example of acceptable use for such functions is adding publisher certificates to the system trust store during software installation.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1553.004 - Install Root Certificate Subvert.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16113": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can tamper with the system network settings.",
                    "description": "Software components sometimes need to interact with higher privilege parts of the operating system, often requiring administrative access to accomplish a task. Operating systems include a complete network stack with many services that allow the machine to connect to the internet. Some of these services are used to secure network access. For that reason, attackers often aim to tamper with system network settings. Disabling firewalls and other network security features enable the malicious code to execute without being blocked. While the presence of code that tampers with system network settings does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that interact with system network settings. One example of acceptable use for such functions is allowing specialized applications to use non-standard network ports by updating the firewall allowlist.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1562.004 - Disable or Modify System Firewall.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16114": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can tamper with the system security settings.",
                    "description": "Software components sometimes need to interact with higher privilege parts of the operating system, often requiring administrative access to accomplish a task. System security settings are the first line of defense against the most common attack vectors. For that reason, attackers often aim to tamper with system security settings. Disabling User Access Controls (UAC) and other security settings enables malicious code to execute without being blocked. While the presence of code that tampers with system security settings does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that interact with system security settings. One example of acceptable use for such functions is allowing specialized applications to install as services that monitor the operating system events.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1562.001 - Disable or Modify Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16115": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can tamper with the system security software.",
                    "description": "Software components sometimes need to interact with higher privilege parts of the operating system, often requiring administrative access to accomplish a task. Operating systems integrate first and third-party security solutions that can detect and block malicious code. For that reason, attackers often aim to tamper with system security software. Changing antivirus and other security software service settings may enable malicious code to execute without being blocked. While the presence of code that tampers with system security software does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that can temporarily disable system security features. One example of acceptable use for such functions is allowing specialized applications to modify protected folders and settings.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1562.001 - Disable or Modify Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16116": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can bypass system security software.",
                    "description": "Software components sometimes need to interact with higher privilege parts of the operating system, often requiring administrative access to accomplish a task. Operating systems integrate first and third-party security solutions that can detect and block malicious code. For that reason, attackers often aim to bypass system security software. Disabling antivirus and other security software services enables malicious code to execute without being blocked. While the presence of code that interacts with system security software does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that can disable system security software. One example of acceptable use for such functions is allowing specialized applications to modify protected folders and settings.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1562.001 - Disable or Modify Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16117": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can detect installed security software.",
                    "description": "Each security solution has a unique footprint that consists of installed files and changes to system configuration. Malicious code often tries to detect security solutions by accessing registry keys and folder locations associated with the software installation. Detecting which security solution is installed plays a key role in selecting the optimal malware infection strategy. When a computer system is protected by a security solution, malware may decide to behave differently. Malware may choose to delay its execution, change infection stages, or even avoid running altogether. While the presence of code that detects security solutions does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that check for presence of installed security software. One example of acceptable use for such functions is informing the user about possible compatibility issues with the detected security software.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1518.001 - Security Software Discovery.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16118": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can change the system startup sequence.",
                    "description": "Operating systems provide multiple integration points for applications to insert themselves in the system startup sequence. Startup sequence is executed in its entirety each time the computer system powers on. For that reason, attackers typically try to register their malicious code in the system startup sequence. When malicious code is registered to start with the operating system, it achieves persistence, as it becomes permanently installed. While the presence of code that modifies the system startup sequence does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only applications that require constant background operation should consider installing themselves as a part of the startup sequence. One exemption to this recommendation would include running the application after the first system reboot to complete the software installation.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1547.001 - Registry Run Keys/Startup Folder.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16119": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can elevate the running application privileges.",
                    "description": "Operating systems execute application code in multiple privilege access levels. Separation of privileges is designed to protect the stability and integrity of the operating system by shielding it from issues that may affect the user-mode applications it runs. However, some user-mode applications may need to interact with higher privilege parts of the operating system to accomplish a specific task. For this purpose operating systems provide facilities that user-mode applications may use to temporarily elevate their running privileges. Malicious code often requires elevated privileges to bypass security solutions, or achieve persistence. While the presence of code that elevates its running privilege does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that can elevate application privilege. One example of acceptable use for such functions is allowing the application to collect its debugging and error handling information.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1134 - Access Token Manipulation.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16120": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can elevate the user privileges.",
                    "description": "Operating systems execute application code in multiple privilege access levels. Separation of privileges is designed to protect the stability and integrity of the operating system by shielding it from issues that the user run applications may cause. However, some users may need to interact with higher privilege parts of the operating system to accomplish specific tasks. For this purpose, operating systems provide facilities that users may leverage to temporarily elevate their running privileges. Users with higher privileges can run any application with the same privilege level as their own. Attackers often try to trick privileged users into running malicious code, enabling them to infect the operating system. While the presence of code that elevates user privileges does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that can elevate user privileges. One example of acceptable use for such functions is allowing the users to install software packages and updates.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1548 - Abuse Elevation Control Mechanism.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16121": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can tamper with the system backup functions.",
                    "description": "Operating systems provide utilities that allow the users to have their data automatically backed up. Backups provide resilience against incidents of material data loss through hardware corruption, or unintended file deletion. Financially motivated attackers often aim to disable backup systems and delete all instances of previously backed up data. Malicious code that typically exhibits these behavior traits is commonly referred to as ransomware. Ransomware aims to encrypt all user-generated data asking for monetary payment in return for providing the access back to its victims. While the presence of code that disables backup systems does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that can temporarily disable backups. One example of acceptable use for such functions is allowing the user to reduce their storage footprint in case data backups are no longer needed.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1490 - Inhibit System Recovery.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16122": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can access browser databases.",
                    "description": "Installed software stores sensitive user information in application-specific databases. For browsers, this sensitive information includes the complete history of visited websites, autocomplete form data, saved passwords, website cookies and session information. These databases are typically not protected from unauthorized access for user convenience. Any encryption they might employ is easily bypassed, as the encryption keys are commonly stored alongside the data. For this reason, attackers often aim to gain access to browser databases and exfiltrate collected data to a remote server. While the presence of code that accesses browser databases does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that can interact with browser databases. One example of acceptable use for such functions is extending browser functionality through natively developed plugins.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1217 - Browser Information Discovery.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16123": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can access email application databases.",
                    "description": "Installed software stores sensitive user information in application-specific databases. For email clients, this sensitive information includes the complete email correspondence, list of contacts, saved passwords, email attachments and digital signatures. These databases are typically not protected from unauthorized access for user convenience. Any encryption they might employ is easily bypassed, as the encryption keys are commonly stored alongside the data. For this reason, attackers often aim to gain access to email application databases and exfiltrate collected data to a remote server. While the presence of code that accesses email databases does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that can interact with email client data. One example of acceptable use for such functions is extending email client application functionality through natively developed plugins.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1114 - Email Collection.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16124": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can access instant messaging application databases.",
                    "description": "Installed software stores sensitive user information in application-specific databases. For instant messaging clients, this sensitive information includes the complete message correspondence, list of contacts, saved passwords, exchanged files and digital signatures. These databases are typically not protected from unauthorized access for user convenience. Any encryption they might employ is easily bypassed, as the encryption keys are commonly stored alongside the data. For this reason, attackers often aim to gain access to instant messaging application databases and exfiltrate collected data to a remote server. While the presence of code that accesses instant messaging databases does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that can interact with messaging client data. One example of acceptable use for such functions is extending messaging client application functionality through natively developed plugins.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1005 - Data from Local System.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16125": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can access third-party application databases.",
                    "description": "Installed software stores sensitive user information in application-specific databases. For third-party applications, this sensitive information may include stored passwords, sensitive files and other user communications. These databases are typically not protected from unauthorized access for user convenience. Any encryption they might employ is easily bypassed, as the encryption keys are commonly stored alongside the data. For this reason, attackers often aim to gain access to third-party application databases and exfiltrate collected data to a remote server. While the presence of code that accesses third-party databases does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using functions that can interact with sensitive user information. One example of acceptable use for such functions is extending third-party application functionality through natively developed plugins.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1005 - Data from Local System.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16126": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 4,
            "rl-level": null,
            "severity": "low",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can access user identity information.",
                    "description": "Operating systems allow multiple user accounts to coexist on a single computer system. Each registered user has identity information associated with their account. At the very least, user accounts consist of a user name and an optional password. In some cases, user account data may also include personally identifiable information. Extended personal information may include user's given and last name, their email and mailing address, personal photo and their telephone number. Financially motivated attackers may seek to collect personal information for purposes of selling the private data to a third-party. Malicious code that typically exhibits these behavior traits is commonly referred to as an information stealer. While the presence of code that accesses identity information does not necessarily imply malicious intent, all of its uses in a software package should be documented and approved. Accessing identity information is a very common behavior for software packages. One example of acceptable use for such functions is verifying that the active user has purchased a software license that allows them to run the application.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1033 - System Owner/User Discovery.",
                            "type": "consult"
                        }
                    ]
                }
            ]
        }
    },
    "TH16127": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 4,
            "rl-level": null,
            "severity": "low",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that have code outside of the common screen width.",
                    "description": "Diligent software developers audit the source code of a component before it gets included in the software project. This audit often includes reviewing key pieces of code hosted in a public source repository. Aiming to avoid detection through spot-checks, attackers often hide malicious payloads by placing the code outside the common screen width. Depending on how the code editor used for review is configured, the malicious code might never be shown to the developer during the audit. Since many programming languages allow multiple statements to be made in the same line of code, both visible and off-screen code will be executed. While presence of code outside the common screen width does not imply malicious intent, all of its uses in a software package should be documented and approved. When a software package has behavior traits similar to malicious software, it may become flagged by security solutions.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1027 - Obfuscated Files or Information.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16128": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that can detect common crypto tokens.",
                    "description": "Crypto tokens are versatile digital assets used within the blockchain ecosystem. Crypto tokens are used to represent a wide range of values, rights, or utilities. They play a crucial role in decentralized finance (DeFi), governance, and other blockchain-based applications. Most crypto tokens are built on existing blockchains using smart contracts. A smart contract is a self-executing contract with the terms of the agreement directly written as lines of code. These contracts automatically execute and enforce themselves when predetermined conditions are met, without the need for intermediaries. For this reason, attackers often aim to steal crypto tokens from the machines they infect. Once stolen, crypto tokens are difficult to trace or recover due to the decentralized and pseudonymous nature of blockchain technology. The irreversibility of blockchain transactions means that once the tokens are transferred to the another crypto wallet, they are effectively gone, making them an attractive target for financially motivated actors. While presence of regex code that detects crypto tokens does not imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider working with crypto tokens.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider rewriting the flagged code without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16501": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of package manifests with entry points dependent on localization.",
                    "description": "Many popular programming languages use standardized software packaging formats to distribute reusable code components. Software packages are built from instructions written within package manifests that act as blueprints for package assembly. A package manifest declares the most important software properties, such as the package name, its authors and license, external dependencies, and various actions that may occur during the package lifecycle. Software applications are required to have one or more entry points. Entry points are functions contained within the application that need be executed before any other code. These functions are used to initialize the application, after which they pass the execution to other application functions depending on software configuration or user input. Therefore, it is uncommon to have entry points that are dependent on localization, the language, or the region in which the software is used. Localization should be handled by the application logic, not by declaring different entry point functions within the package manifest. Threat actors often abuse package localization features to avoid detection by security solutions.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider rewriting the package manifest without localizing software entry points.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16502": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "dangerous package manifests",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of package manifests that execute cryptocurrency miners.",
                    "description": "Many popular programming languages use standardized software packaging formats to distribute reusable code components. Software packages are built from instructions written within package manifests that act as blueprints for package assembly. A package manifest declares the most important software properties, such as the package name, its authors and license, external dependencies, and various actions that may occur during the package lifecycle. Actions defined within the package manifest are executed automatically by the package manager during events such as package installation, compilation, testing, or on package removal. These events are used by software developers to set up the environment for package use, or to perform cleanup upon package removal. However, package manifest actions are commonly abused by threat actors to execute arbitrary commands on the development machine. It was detected that the package manifest could deploy cryptocurrency miners through an action. This type of behavior is typically observed only in malicious packages that get published to public open source package repositories.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software intent does not relate to the reported behavior, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing cryptocurrency miners from the package manifest.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16503": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "dangerous package manifests",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of package manifests that execute unusual system commands.",
                    "description": "Many popular programming languages use standardized software packaging formats to distribute reusable code components. Software packages are built from instructions written within package manifests that act as blueprints for package assembly. A package manifest declares the most important software properties, such as the package name, its authors and license, external dependencies, and various actions that may occur during the package lifecycle. Actions defined within the package manifest are executed automatically by the package manager during events such as package installation, compilation, testing, or on package removal. These events are used by software developers to set up the environment for package use, or to perform cleanup upon package removal. However, package manifest actions are commonly abused by threat actors to execute arbitrary commands on the development machine. It was detected that the package manifest could execute unusual operating system commands. Unusual commands resemble common threat actor tactics, such as destructive file deletion, elevation of privileges, or tampering with security settings. Unusual package manifests often contain code obfuscation, anti-analysis features, and other detection evasion techniques.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software intent does not relate to the reported behavior, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider rewriting the package manifest without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16504": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of package manifests that execute code written in another programming language.",
                    "description": "Many popular programming languages use standardized software packaging formats to distribute reusable code components. Software packages are built from instructions written within package manifests that act as blueprints for package assembly. A package manifest declares the most important software properties, such as the package name, its authors and license, external dependencies, and various actions that may occur during the package lifecycle. Actions defined within the package manifest are executed automatically by the package manager during events such as package installation, compilation, testing, or on package removal. It is unusual to have a package manifest that executes actions using programming languages that are not native to the package ecosystem. Attackers often reuse code across ecosystems, targeting developers that have multiple languages installed on their machines. This is a simple but effective way to avoid detection by security solutions.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider rewriting the package manifest without using multiple programming languages.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16505": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "dangerous package manifests",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of package manifests that hijack operating system commands.",
                    "description": "Many popular programming languages use standardized software packaging formats to distribute reusable code components. Software packages are built from instructions written within package manifests that act as blueprints for package assembly. A package manifest declares the most important software properties, such as the package name, its authors and license, list of external dependencies, and various actions that may occur during the package lifecycle. Package manifests allow developers to register their own commands with the operating system. This package manager feature allows developers to simplify application consumption, making it easy to integrate software packages into development workflows. However, it was detected that the software package might abuse this feature to hijack common operating system commands. Attackers often hijack system commands to ensure that their malicious application gets executed before the intended one. This allows the attackers to modify application runtime parameters, or to collect sensitive information that gets passed to trusted applications.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider rewriting the package manifest without overriding operating system commands.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16506": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "dangerous package manifests",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of package manifests that hijack common development tools.",
                    "description": "Many popular programming languages use standardized software packaging formats to distribute reusable code components. Software packages are built from instructions written within package manifests that act as blueprints for package assembly. A package manifest declares the most important software properties, such as the package name, its authors and license, list of external dependencies, and various actions that may occur during the package lifecycle. Package manifests allow developers to register their own commands with the operating system. This package manager feature allows developers to simplify application consumption, making it easy to integrate software packages into development workflows. However, it was detected that the software package might abuse this feature to hijack common development tools. Attackers often hijack development commands to ensure that their malicious application gets executed before the intended one. This allows the attackers to modify application runtime parameters, or to collect sensitive information that gets passed to trusted applications.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider rewriting the package manifest without overriding development tool commands.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16507": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "dangerous package manifests",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of package manifests that have networking capabilities.",
                    "description": "Many popular programming languages use standardized software packaging formats to distribute reusable code components. Software packages are built from instructions written within package manifests that act as blueprints for package assembly. A package manifest declares the most important software properties, such as the package name, its authors and license, external dependencies, and various actions that may occur during the package lifecycle. Actions defined within the package manifest are executed automatically by the package manager during events such as package installation, compilation, testing, or on package removal. It is unusual for a package manifest to invoke commands that download additional content from a remote server. Attackers commonly abuse package manifest actions to fetch malicious payloads from public code repositories, file sharing websites, or their own infrastructure. Remotely hosted content is not immutable, allowing the attackers to change the type of malware they deploy at any time.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software intent does not relate to the reported behavior, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider rewriting the package manifest without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16508": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "dangerous package manifests",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of package manifests that can collect sensitive system information.",
                    "description": "Many popular programming languages use standardized software packaging formats to distribute reusable code components. Software packages are built from instructions written within package manifests that act as blueprints for package assembly. A package manifest declares the most important software properties, such as the package name, its authors and license, external dependencies, and various actions that may occur during the package lifecycle. Actions defined within the package manifest are executed automatically by the package manager during events such as package installation, compilation, testing, or on package removal. It is unusual for a package manifest to execute commands that can collect sensitive system information. Attackers often abuse package manifests to run commands that collect identifiable system information such as hostnames, user names, folder structures, and other data points that could help them understand the environment in which their malicious code was installed.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software intent does not relate to the reported behavior, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider rewriting the package manifest without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH16509": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "dangerous package manifests",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of package manifests that can access sensitive system files.",
                    "description": "Many popular programming languages use standardized software packaging formats to distribute reusable code components. Software packages are built from instructions written within package manifests that act as blueprints for package assembly. A package manifest declares the most important software properties, such as the package name, its authors and license, external dependencies, and various actions that may occur during the package lifecycle. Actions defined within the package manifest are executed automatically by the package manager during events such as package installation, compilation, testing, or on package removal. It is unusual for a package manifest to execute commands that can collect sensitive system files. Attackers often abuse package manifests to run commands that collect authentication details such as tokens and credentials, private keys, environment files, and other secrets that could help them gain unauthorized access to the system on which their malicious code was installed.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software intent does not relate to the reported behavior, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider rewriting the package manifest without using the marked behaviors.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17101": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "restricted network references",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that were explicitly restricted.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. One or more URLs found in the software package were explicitly marked as restricted.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Review the audit section to better understand the organization security policy.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17102": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "low",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing a Base-encoded URL.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Obfuscation is a process of mangling the software code legibility, and it can be applied to URLs embedded in a software package. Obfuscation can interfere with the accuracy of security and software quality assessment solutions. For this reason, obfuscation is a technique commonly used by malicious actors as a means of bypassing security solutions and avoiding detection. While presence of URL obfuscation does not imply malicious intent, all of its uses in a software package should be documented and approved. URLs have their own encoding type called url-encoding, which is the preferred way of encoding URLs used on the web.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections as indicators of software tampering.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1027 - Obfuscated Files or Information.",
                            "type": "consult"
                        },
                        {
                            "content": "Consider encoding all embedded URL data with url-encoded format.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17103": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing references to TOR or hidden service URLs.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. The Onion Router (TOR) enables its users to anonymously interact with the content on the web. For this reason, TOR services are commonly used by malicious actors to maintain anonymity while conducting their attacks. While presence of TOR references does not imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider using the TOR network to enable anonymous internet access. One example of acceptable use for hidden service URLs is in applications designed to combat online censorship.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17104": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 4,
            "rl-level": null,
            "severity": "low",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs related to paste-and-share services.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Paste-and-share services are websites that allow their users to easily share code snippets and simple plain text documents. Users typically do not need to be registered on the website to publish and access shared information. For this reason, paste-and-share services are commonly used by malicious actors to deliver stages of their malware payloads. Many software supply chain attacks in the open source space leverage paste-and-share services to deliver malicious payloads. Presence of paste-and-share service references does not imply malicious intent. Software developers commonly include links to such services as documentation for various issues they encounter while writing and maintaining code bases.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17105": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs related to Bitcoin mining pools.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Bitcoin (BTC) is a digital currency that uses peer-to-peer technology to facilitate instant payments on the web. Bitcoin mining is the process of creating new bitcoins by solving extremely complicated math problems that verify transactions in the currency exchange. When a bitcoin is successfully mined, the miner receives a predetermined amount of bitcoin. Bitcoin mining is a lucrative, but expensive, venture. For that reason, malicious actors often try to hijack computer systems with the aim to make others cover the mining cost. While presence of Bitcoin mining references does not imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider mining for bitcoin.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17106": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs related to Bitcoin laundering services.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Bitcoin (BTC) is a digital currency that uses peer-to-peer technology to facilitate instant payments on the web. The goal of money laundering is to obscure the criminal origins of funds so that they can be accessed and spent. In the context of cryptocurrency-based crime, that generally means moving funds to services where they can be converted into cash, while often taking extra steps to conceal where the funds came from. While presence of Bitcoin laundering service references does not imply malicious intent, all of its uses in a software package should be documented and approved. Security solutions are the only application type that should consider having references to Bitcoin laundering services.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17107": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs related to Bitcoin exchange services.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Bitcoin (BTC) is a digital currency that uses peer-to-peer technology to facilitate instant payments on the web. Bitcoin exchanges allow their customers to trade cryptocurrencies or digital currencies for other assets, such as conventional fiat money or other digital currencies. Financially motivated actors often include references to cryptocurrency exchanges in their code. Ransomware victims are instructed to visit Bitcoin exchanges to acquire the digital currency. Bitcoin is the most common payment method accepted by attackers in exchange for decrypting the user-generated data that is held for ransom. While presence of Bitcoin exchange service references does not imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider keeping track of Bitcoin exchange websites.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17108": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that link to deceptive file formats.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Attackers often try to obfuscate URLs with the aim of avoiding detection by security solutions. One common obfuscation technique attackers use is crafting deceptive links to externally hosted files. Users are more likely to click the links they deem trustworthy. Having two or more file extensions in a URL increases the odds of a deceptive link being perceived as trustworthy, especially if the first extension is commonly encountered by the user (such as the file extension of a popular document format). The reason why these links are considered deceptive is because the operating system will download the linked file and execute it with the last extension it detects, not the first. Attackers abuse this file naming quirk to trick users into running their malicious code. While presence of deceptive file format references does not imply malicious intent, all of their uses in a software package should be documented and approved. It is recommended to avoid double file format extensions altogether.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider changing the file extension for self-hosted files.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17109": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malicious network references",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that match known malware resource paths.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Attackers often reuse URL paths and query parameters between malicious campaigns. That makes it possible to detect a malicious network resource through static URL composition analysis. Because the attackers frequently migrate to different domains, the rules that detect malicious URLs are typically designed to match paths on any domain. While presence of known malware resource paths in network references does not imply malicious intent, all instances of this issue should be put under scrutiny and thoroughly reviewed.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Remove all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17110": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that use homoglyph-spoofed variations of trusted domains.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. In typography, a homoglyph is one of two or more characters (or glyphs) with shapes that appear identical or very similar, but may have completely differing meanings. Attackers often register spoofed variations of known and trusted domains. By abusing homoglyphs, attackers can create malicious domains that appear visually identical to trusted ones. While presence of homoglyphs in network references does not imply malicious intent, all instances of this issue should be reviewed for spelling mistakes and typos. An attacker could be controlling the domains the application intends to connect to.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Remove all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17111": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that use sign-in paths specific to trusted domains.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Attackers often try to trick users into visiting a malicious domain. Users are more likely to click the links they deem to be trustworthy. To appear trustworthy, attackers may leverage URL paths that appear similar to sign-in paths of trusted domains. Combined with other URL obfuscation techniques, this approach may mislead the users into visiting an attacker-controlled domain. While presence of trusted sign-in paths in network references does not imply malicious intent, all instances of this issue should be reviewed.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17112": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that use punycode-spoofed variations of trusted domains.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Punycode is a representation of Unicode with the limited ASCII character subset used for domain names. Using punycode, domains containing Unicode characters are transcoded to a subset of ASCII consisting of letters, digits and hyphens. Attackers often register spoofed variations of known and trusted domains. By abusing punycode, attackers can create malicious domains that appear visually identical to trusted ones. While presence of punycode in network references does not imply malicious intent, all instances of this issue should be reviewed for spelling mistakes and typos. An attacker could be controlling the domains the application intends to connect to.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Remove all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17113": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that use typosquatted variations of trusted domains.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Typosquatting relies on typographical errors than might occur when typing the domain name or a top-level domain (TLD) code the trusted domain is registered under. By predicting common spelling mistakes, attackers can pre-register domains with URLs that the users are likely to visit directly. While presence of typosquatted variations in network references does not imply malicious intent, all instances of this issue should be reviewed for spelling mistakes and typos. An attacker could be controlling the domains the application intends to connect to.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Remove all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17114": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that use trusted domains as subdomains.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Attackers often try to trick users into visiting a malicious domain. Users are more likely to click the links they deem trustworthy. To appear trustworthy, attackers may craft URLs that use well-known and trusted domains as subdomains. Subdomains appear first in the browser address bar. Combined with other URL obfuscation techniques, this approach may mislead the users into visiting an attacker-controlled domain. While presence of trusted domains as subdomains does not imply malicious intent, all instances of this issue should be reviewed for spelling mistakes and typos. An attacker could be controlling the domains the application intends to connect to.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Remove all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17115": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "low",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that use non-standard ports.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. A port number is associated with a network address of a host, such as an IP address, and the type of network protocol used for communication. Within URLs, the ports are optional. Ports can be specified in a URL immediately following the domain name. Each network protocol, or schema, has a set of standard ports on which the service operates. This issue is raised when a mismatch between a network protocol and its expected port number is detected. While the presence of non-standard ports does not imply malicious intent, all of their uses in a software package should be documented and approved.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider changing the port to one that is standard for the networking protocol.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17116": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 4,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs with important query parameters.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Query parameters are a defined set of parameters (key-value pairs) attached to the end of a URL. Query parameters are used to provide additional information to a web service when making a request. They are an optional, but an important part of the URL, as they may define specific content or actions based on the data being passed. Some data they pass might be considered sensitive information. Since query parameters are not encrypted, this might cause sensitive information to leak. This issue is raised for query parameters that might contain information that attackers can easily intercept. Examples of sensitive information fields include hostname, password, email, IMEI and other similar parameters.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider changing the query parameters for flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17117": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malicious network references",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that link to blacklisted domains.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. One or more embedded URLs were discovered to link to an address found on a proprietary ReversingLabs domain blacklist. Software components that contain links to blacklisted domains are reported as malicious.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "If the software intent does not relate to malicious behavior, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Avoid using this software package.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH17118": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that use suspicious top-level domains.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Top-level domains (TLD) are a part of the Domain Name System (DNS), and are used to lookup an Internet Protocol (IP) address of a requested website. There are a few different types of top-level domains. Generic, sponsored and country-code TLDs are generally accessible to the public. Registrars that govern the assignment of domain names within the TLD may choose to sell specific domain names to an interested party. However, some registrars are known to have less strict rules for assigning domain names. Attackers often abuse gaps in governance and actively seek to register their malicious domains in such TLDs. This issue is raised for all domains registered within TLDs that harbor an excessive number of malicious sites. While the presence of suspicious TLDs does not imply malicious intent, all of its uses in a software package should be documented and approved.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider changing the top-level domain to avoid being flagged by security solutions.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17119": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs with suspicious path components.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. URL paths provide additional information to a web service when making a request. They are an optional, but an important part of the URL, as they may define specific content or actions based on the data being passed. Some parameters they pass might be considered sensitive information. Since path components are not encrypted this might cause sensitive information to leak. This issue is raised for URL paths than might contain information that attackers can easily intercept. Examples of sensitive information fields include passwords and other similar parameters.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17120": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malicious network references",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that redirect to malicious domains.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. One or more embedded URLs were discovered to redirect to an address found on a proprietary ReversingLabs domain blacklist. Software components that abuse open redirects by forwarding to blacklisted domains are reported as malicious.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "If the software intent does not relate to malicious behavior, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Avoid using this software package.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH17121": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs related to anonymous file-sharing services.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. One or more embedded URLs were discovered to link to anonymous file-sharing services. Attackers often abuse popular web services to host malicious payloads. Since file-sharing services URLs are typically allowed by security solutions, using them for payload delivery increases the odds that the malicious code will reach the user. While the presence of file-sharing service locations does not imply malicious intent, all of their uses in a software package should be documented and approved. An increasing number of software supply chain attacks in the open source space leverages anonymous file-sharing services to deliver malicious payloads.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider an alternative delivery mechanism for software packages.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17122": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs related to IP querying services.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. When accessing the internet, a device is assigned a unique Internet Protocol (IP) address. This address identifies the point of origin and destination of each request a connected device makes. Attackers often aim to better understand their targets. Collecting basic reconnaissance information typically includes the IP address of a machine. While the operating system has the utilities to get this information, some attackers may prefer getting this data from an external source. Many web services host pages that return the IP address of the caller. For that reason, attackers often opt to get the IP information from a third-party service. While the presence of IP querying services does not imply malicious intent, all of their uses in a software package should be documented and approved.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider an alternative mechanism for detecting the machine's IP address.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17123": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that link to Discord attachments.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. One or more embedded URLs were discovered to link to the file attachments hosted on Discord. Attackers often abuse popular web services to host malicious payloads. Since file-sharing services URLs are typically allowed by security solutions, using them for payload delivery increases the odds that the malicious code will reach the user. While the presence of Discord file-sharing locations does not imply malicious intent, no software should be directly linking to a Discord file attachment. An increasing number of software supply chain attacks in the open source space leverages the Discord file-sharing service to deliver malicious payloads.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Remove all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17124": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that link to Dropbox download pages.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. One or more embedded URLs were discovered to link to the Dropbox file-sharing service. Attackers often abuse popular web services to host malicious payloads. Since file-sharing services URLs are typically allowed by security solutions, using them for payload delivery increases the odds that the malicious code will reach the user. While the presence of file-sharing service locations does not imply malicious intent, all of their uses in a software package should be documented and approved. An increasing number of software supply chain attacks in the open source space leverages the Dropbox file-sharing service to deliver malicious payloads.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider an alternative delivery mechanism for software packages.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17125": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs related to Discord webhooks.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Webhooks are web callback interfaces that enable real-time event notifications. Applications provide a public-facing interface that the web service calls when an appropriate event occurs. Attackers often abuse Discord webhooks as a command and control mechanism that instructs the infected computer systems to perform malicious actions. While the presence of Discord webhooks does not imply malicious intent, all of their uses in a software package should be documented and approved. An increasing number of software supply chain attacks in the open source space leverages Discord webhooks for command and control.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Remove all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17126": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing domains related to out-of-band application security testing tools.",
                    "description": "Out-of-band application security testing tools (OAST) rely on external servers to detect security vulnerabilities in web applications. This form of security testing inspects the web application from the outside in, similar to how the attackers would probe its defenses. External domains are commonly used to facilitate out-of-band security testing. Attackers commonly abuse tools designed for security testing to monitor network traffic and find weaknesses that can be exploited. While the presence of domains related to OAST tools does not imply malicious intent, all of their uses in a software package should be documented and approved. Attackers might have purposely injected security testing tools in the software package to monitor the network traffic of the infected computer system. It is also possible that the software package has mistakenly included a part of its testing infrastructure during packaging.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17127": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that link to raw files on GitHub.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. One or more embedded URLs were discovered to link to raw files hosted on GitHub. Attackers often abuse popular web services to host malicious payloads. Since code-sharing services URLs are typically allowed by security solutions, using them for payload delivery increases the odds that the malicious code will reach the user. While the presence of code-sharing service locations does not imply malicious intent, all of their uses in a software package should be documented and approved. An increasing number of software supply chain attacks in the open source space leverages the GitHub service to deliver malicious payloads.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider an alternative delivery mechanism for software packages.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17128": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that link to raw files on GitLab.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. One or more embedded URLs were discovered to link to raw files hosted on GitLab. Attackers often abuse popular web services to host malicious payloads. Since code-sharing services URLs are typically allowed by security solutions, using them for payload delivery increases the odds that the malicious code will reach the user. While the presence of code-sharing service locations does not imply malicious intent, all of their uses in a software package should be documented and approved. An increasing number of software supply chain attacks in the open source space leverages the GitLab service to deliver malicious payloads.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider an alternative delivery mechanism for software packages.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17129": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "malicious network references",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing domains associated with ransomware.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. One or more embedded URLs were discovered to redirect to an address found on a proprietary ReversingLabs domain blacklist. Software components that abuse open redirects by forwarding to blacklisted domains are reported as malicious.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "If the software intent does not relate to malicious behavior, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Avoid using this software package.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH17130": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing domains related to coinmining services.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Digital currencies use a peer-to-peer technology to facilitate instant payments on the web. Coinmining is the process of creating new digital currency coins by solving extremely complicated math problems that verify transactions in the currency exchange. When a crypto coin is successfully mined, the miner receives a predetermined amount of digital currency. Coinmining is a lucrative, but expensive, venture. For that reason, malicious actors often try to hijack computer systems with the aim to make others cover the mining cost. While presence of coinmining references does not imply malicious intent, all of its uses in a software package should be documented and approved. Only select applications should consider mining for digital currency. An increasing number of software supply chain attacks in the open source space tries to install unauthorized coinmining software.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17131": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing domains used for intercepting and inspecting HTTP requests.",
                    "description": "Applications communicate with web services by exchanging HTTP requests. During software development, externally hosted services are used by developers to debug software quality issues relating to exchanging HTTP requests. Attackers commonly abuse tools designed for HTTP request inspection to monitor network traffic and extract sensitive information from the HTTP traffic. While the presence of domains related to HTTP inspection does not imply malicious intent, all of their uses in a software package should be documented and approved. Attackers might have purposely injected security testing tools in the software package to monitor the network traffic of the infected computer system. It is also possible that the software package has mistakenly included a part of its testing infrastructure during packaging.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider removing all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH17132": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs related to the Telegram API.",
                    "description": "Uniform Resource Locators (URLs) are structured addresses that point to locations and assets on the internet. URLs allow software developers to build complex applications that exchange data with servers that can be hosted in multiple geographical regions. URLs can commonly be found embedded in documentation, configuration files, source code and compiled binaries. Telegram, like many other instant messaging solutions, provides a public-facing API that the chat client can invoke when an appropriate application event occurs. Attackers often abuse Telegram APIs as a command-and-control mechanism that instructs the infected computer systems to perform malicious actions. While the presence of Telegram APIs does not imply malicious intent, all of their uses in a software package should be documented and approved. An increasing number of software supply chain attacks in the open source space leverages Telegram infrastructure for command and control.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software should not include these network references, investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Remove all references to flagged network locations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH18101": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that reside in regions with US export restrictions.",
                    "description": "Export restrictions (or a restriction on exportation) are limitations on the quantity of goods exported to a specific country or countries by a Government. The United States Government has imposed export restrictions on a number of countries and regions. These restrictions may or may not apply to digital goods such as software and other related intellectual property. It is advised that the reported findings are put in the usage context so that they can be audited and reviewed by the legal department before the software package is deployed. Current list of countries with export restrictions includes: Cuba (.cu), Iran (.ir), North Korea (.nk) and Syria (.sy).",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the legal review is completed.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH18102": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of files containing URLs that reside in regions with EU export restrictions.",
                    "description": "Export restrictions (or a restriction on exportation) are limitations on the quantity of goods exported to a specific country or countries by a Government. The European Union has imposed export restrictions on a number of countries and regions. These restrictions may or may not apply to digital goods such as software and other related intellectual property. It is advised that the reported findings are put in the usage context so that they can be audited and reviewed by the legal department before the software package is deployed. Current list of countries with export restrictions includes: Belarus (.by), Iran (.ir), Iraq (.iq), Libya (.ly), Myanmar (.mm), North Korea (.nk), Syria (.sy), Venezuela (.ve) and Zimbabwe (.zw).",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the legal review is completed.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH18201": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components authored by accounts in regions with US export restrictions.",
                    "description": "Export restrictions (or a restriction on exportation) are limitations on the quantity of goods exported to a specific country or countries by a Government. The United States Government has imposed export restrictions on a number of countries and regions. These restrictions may or may not apply to digital goods such as software and other related intellectual property. It is advised that the reported findings are put in the usage context so that they can be audited and reviewed by the legal department before the software package is deployed. Current list of countries with export restrictions includes: Cuba (.cu), Iran (.ir), North Korea (.nk) and Syria (.sy).",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the legal review is completed.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH18202": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components authored by accounts in regions with EU export restrictions.",
                    "description": "Export restrictions (or a restriction on exportation) are limitations on the quantity of goods exported to a specific country or countries by a Government. The European Union has imposed export restrictions on a number of countries and regions. These restrictions may or may not apply to digital goods such as software and other related intellectual property. It is advised that the reported findings are put in the usage context so that they can be audited and reviewed by the legal department before the software package is deployed. Current list of countries with export restrictions includes: Belarus (.by), Iran (.ir), Iraq (.iq), Libya (.ly), Myanmar (.mm), North Korea (.nk), Syria (.sy), Venezuela (.ve) and Zimbabwe (.zw).",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the legal review is completed.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH18301": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components hosted on repositories in regions with US export restrictions.",
                    "description": "Export restrictions (or a restriction on exportation) are limitations on the quantity of goods exported to a specific country or countries by a Government. The United States Government has imposed export restrictions on a number of countries and regions. These restrictions may or may not apply to digital goods such as software and other related intellectual property. It is advised that the reported findings are put in the usage context so that they can be audited and reviewed by the legal department before the software package is deployed. Current list of countries with export restrictions includes: Cuba (.cu), Iran (.ir), North Korea (.nk) and Syria (.sy).",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the legal review is completed.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH18302": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components hosted on repositories in regions with EU export restrictions.",
                    "description": "Export restrictions (or a restriction on exportation) are limitations on the quantity of goods exported to a specific country or countries by a Government. The European Union has imposed export restrictions on a number of countries and regions. These restrictions may or may not apply to digital goods such as software and other related intellectual property. It is advised that the reported findings are put in the usage context so that they can be audited and reviewed by the legal department before the software package is deployed. Current list of countries with export restrictions includes: Belarus (.by), Iran (.ir), Iraq (.iq), Libya (.ly), Myanmar (.mm), North Korea (.nk), Syria (.sy), Venezuela (.ve) and Zimbabwe (.zw).",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the legal review is completed.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH19101": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "unsafe AI models detected",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of serialized data formats that can execute code.",
                    "description": "An AI (Artificial Intelligence) model is a mathematical representation of a process that uses algorithms to learn patterns and make predictions based on provided data. After the models are trained, their mathematical representations are stored in a variety of data serialization formats. Stored AI models can be shared and reused without the need for additional model training. Pickle is a popular Python module that many data scientists use for serializing and deserializing AI model data. Pickle is considered an unsafe data format, as it allows Python code to be executed during AI model deserialization. Attackers commonly abuse Pickle and other unsafe data serialization formats to hide their malicious payloads. It was detected that the serialized data includes Python code that can invoke external scripts and execute arbitrary commands on the computer system that attempts to deserialize the AI model data. While presence of Python code within serialized data does not always imply malicious intent, its use in an AI model should be documented and approved. It is recommended that any custom actions needed to load the AI model be kept separate from the serialized model data.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider replacing the selected data serialization format with a safer alternative.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH19102": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "unsafe AI models detected",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of serialized data formats that have networking capabilities.",
                    "description": "An AI (Artificial Intelligence) model is a mathematical representation of a process that uses algorithms to learn patterns and make predictions based on provided data. After the models are trained, their mathematical representations are stored in a variety of data serialization formats. Stored AI models can be shared and reused without the need for additional model training. Pickle is a popular Python module that many data scientists use for serializing and deserializing AI model data. Pickle is considered an unsafe data format, as it allows Python code to be executed during AI model deserialization. Attackers commonly abuse Pickle and other unsafe data serialization formats to hide their malicious payloads. It was detected that the serialized data includes Python code that can access web resources and make network requests on the computer system that attempts to deserialize the AI model data. While presence of Python code within serialized data does not always imply malicious intent, its use in an AI model should be documented and approved. It is recommended that any custom actions needed to load the AI model be kept separate from the serialized model data.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider replacing the selected data serialization format with a safer alternative.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH19103": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "unsafe AI models detected",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of serialized data formats that can create new processes.",
                    "description": "An AI (Artificial Intelligence) model is a mathematical representation of a process that uses algorithms to learn patterns and make predictions based on provided data. After the models are trained, their mathematical representations are stored in a variety of data serialization formats. Stored AI models can be shared and reused without the need for additional model training. Pickle is a popular Python module that many data scientists use for serializing and deserializing AI model data. Pickle is considered an unsafe data format, as it allows Python code to be executed during AI model deserialization. Attackers commonly abuse Pickle and other unsafe data serialization formats to hide their malicious payloads. It was detected that the serialized data includes Python code that can create new processes and execute arbitrary commands on the computer system that attempts to deserialize the AI model data. While presence of Python code within serialized data does not always imply malicious intent, its use in an AI model should be documented and approved. It is recommended that any custom actions needed to load the AI model be kept separate from the serialized model data.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider replacing the selected data serialization format with a safer alternative.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH19104": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "unsafe AI models detected",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of serialized data formats that can access system interfaces.",
                    "description": "An AI (Artificial Intelligence) model is a mathematical representation of a process that uses algorithms to learn patterns and make predictions based on provided data. After the models are trained, their mathematical representations are stored in a variety of data serialization formats. Stored AI models can be shared and reused without the need for additional model training. Pickle is a popular Python module that many data scientists use for serializing and deserializing AI model data. Pickle is considered an unsafe data format, as it allows Python code to be executed during AI model deserialization. Attackers commonly abuse Pickle and other unsafe data serialization formats to hide their malicious payloads. It was detected that the serialized data includes Python code that can access low-level operating system functions on the computer system that attempts to deserialize the AI model data. While presence of Python code within serialized data does not always imply malicious intent, its use in an AI model should be documented and approved. It is recommended that any custom actions needed to load the AI model be kept separate from the serialized model data.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider replacing the selected data serialization format with a safer alternative.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH19105": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "unsafe AI models detected",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of serialized data formats that can manipulate other serialized files.",
                    "description": "An AI (Artificial Intelligence) model is a mathematical representation of a process that uses algorithms to learn patterns and make predictions based on provided data. After the models are trained, their mathematical representations are stored in a variety of data serialization formats. Stored AI models can be shared and reused without the need for additional model training. Pickle is a popular Python module that many data scientists use for serializing and deserializing AI model data. Pickle is considered an unsafe data format, as it allows Python code to be executed during AI model deserialization. Attackers commonly abuse Pickle and other unsafe data serialization formats to hide their malicious payloads. It was detected that the serialized data includes Python code that can manipulate other serialized files on the computer system that attempts to deserialize the AI model data. While presence of Python code within serialized data does not always imply malicious intent, its use in an AI model should be documented and approved. It is recommended that any custom actions needed to load the AI model be kept separate from the serialized model data.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, or until the issue is risk accepted.",
                            "type": "stop"
                        },
                        {
                            "content": "Consider replacing the selected data serialization format with a safer alternative.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "TH20101": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the SolarWinds Orion software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the SolarWinds Orion software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.002 - Compromise Software Supply Chain.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20102": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the 3CX DesktopApp software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the 3CX DesktopApp software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.002 - Compromise Software Supply Chain.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20103": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the Codecov Uploader software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the Codecov Uploader software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.002 - Compromise Software Supply Chain.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20104": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the UAParser.js software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the UAParser.js software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.001 - Compromise Software Dependencies and Development Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20105": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the CTX software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the CTX software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.001 - Compromise Software Dependencies and Development Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20106": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the XZ Utils software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the XZ Utils software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.001 - Compromise Software Dependencies and Development Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20107": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the Intellect Service M.E.Doc software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the M.E.Doc software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.001 - Compromise Software Dependencies and Development Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20108": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the Command-Option-Argument software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the Command-Option-Argument software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.001 - Compromise Software Dependencies and Development Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20109": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the ESLint Scope software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the ESLint Scope software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.001 - Compromise Software Dependencies and Development Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20110": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the LottieFiles Player software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the LottieFiles Player software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.001 - Compromise Software Dependencies and Development Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20111": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the rest-client software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the rest-client software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.001 - Compromise Software Dependencies and Development Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20112": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the AIOSend aiocpa software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the aiocpa software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.001 - Compromise Software Dependencies and Development Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20113": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the Ultralytics software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the Ultralytics software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.001 - Compromise Software Dependencies and Development Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH20114": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "indicators of tampering found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "diff-hunting",
            "localization": [
                {
                    "label": "Detected indicators of tampering that resemble the Rspack software compromise.",
                    "description": "Publicly disclosed software supply chain compromises can be modeled through their unique set of indicators of tampering. These indicators form a heuristic signature that evaluates during differential analysis, ensuring no similar supply chain attack has affected a software package. Through inspection of changes in behaviors over subsequent versions, a match was made with the indicators of tampering that resemble the Rspack software compromise. Malicious actors are known to re-use the attack patterns that were successful in the past. Some malicious actors are also known to emulate other attackers with the intent to misdirect incident responders. Therefore, having a positive tampering match is not sufficient for attack attribution. It is highly likely that the software package was tampered with by a malicious actor or a rogue insider.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Investigate reported detections.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consult Mitre ATT&CK documentation: T1195.001 - Compromise Software Dependencies and Development Tools.",
                            "type": "consult"
                        },
                        {
                            "content": "Investigate your build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider hiring an external incident response team to assist with finding the root cause of the compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "You should delay the software release until the investigation is completed, and the detection is verified.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30101": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": false,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "warning",
            "localization": [
                {
                    "label": "components with malware history",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that had a recent malware or tampering incident.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Software developers publish components they have authored to public repositories. Some open source projects have a history of security lapses that culminated with a publication of one or more malicious component versions. To ensure that repeated supply chain incidents do not occur, the open source project should be closely monitored for up to two years. All software package versions that are published within two years of the malware incident will convey a warning about the history of security incidents tied to the open source project.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Inspect behaviors exhibited by the detected software components.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software behaviors differ from expected, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Revise the use of components that raise these alarms. If you can't deprecate those components, make sure that their versions are pinned.",
                            "type": "practice"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30102": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": false,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "quarantined components found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that are quarantined in the public package repository.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Software developers publish components they have authored to public repositories. Open source repositories may place software packages into quarantine during an ongoing security incident investigation. When a software project is placed into quarantine, it is typically unavailable for installation. Repository maintainers may also hide quarantined software projects from users that might stumble upon them using repository search functions. Quarantine is typically raised for software projects that were reported for unusual code changes or unexpected software behaviors.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Inspect behaviors exhibited by the detected software components.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software behaviors differ from expected, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Revise the use of components that raise these alarms. If you can't deprecate those components, make sure they are well-documented.",
                            "type": "practice"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30103": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": false,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "warning",
            "localization": [
                {
                    "label": "components prone to hijacking",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that were removed from the public package repository.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Software developers publish components they have authored to public repositories. Open source projects are the intellectual property of their respective authors. At any time, the authors may choose to completely remove the software component from a public repository. This often occurs when a software project reaches its end-of-life stage, or when the software authors lose interest in maintaining the project. This kind of removal frees up the software package name, its unique software identifier in the public repository, for other developers to use. However, new software project owners might have malicious intent. Threat actors are continuously monitoring popular package names in case their unique identifiers suddenly become available for hijacking. Once the software projects falls under new ownership, the new maintainers may opt to use the project popularity to spread malware to unsuspecting users.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Inspect behaviors exhibited by the detected software components.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software behaviors differ from expected, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Revise the use of components that raise these alarms. If you can't deprecate those components, make sure that their versions are pinned.",
                            "type": "practice"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30104": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "medium",
            "offline": false,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that had a recent package version removal incident.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Software developers publish components they have authored to public repositories. Some open source repositories allow the developers to take down software component versions that they have published. For open source projects, version unpublishing is uncommon. Versions are typically removed due to a security incident, such as malicious code tampering or accidental development secrets exposure. Software developers often prioritize taking down such packages before informing the community that they have experienced a security incident. Therefore, it is prudent to review the reasons behind software version removals as these events might be a signal of an ongoing software supply chain attack.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Review software component documentation for the reasons behind the recent version removal.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software version was removed due to a security incident, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Revise the use of components that raise these alarms. If you can't deprecate those components, make sure that their versions are pinned.",
                            "type": "practice"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30105": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "medium",
            "offline": false,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that were recently published to the public package repository.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Software developers publish components they have authored to public repositories. While a new software project is a welcome addition to the open source community, it is not always prudent to indiscriminately use the latest components when building a commercial application. Irrespective of the software quality, the danger of being the first to try out a new project lies in the fact that the software component may contain novel, currently undetected malicious code. Therefore, it is prudent to review software component behaviors and even try out software component in a sandbox, an environment meant for testing untrusted code.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Check the software component behaviors for anomalies.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider exploratory software component testing within a sandbox environment.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider replacing the software component with a more widely used alternative.",
                            "type": "fix"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30106": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "medium",
            "offline": false,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that have low popularity or number of downloads.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Software developers publish components they have authored to public repositories. While a new software project is a welcome addition to the open source community, it is not always prudent to indiscriminately use the latest components when building a commercial application. Irrespective of the software quality, the danger of being the first to try out a new project lies in the fact that the software component may contain novel, currently undetected malicious code. Therefore, it is prudent to review software component behaviors and even try out software component in a sandbox, an environment meant for testing untrusted code.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Check the software component behaviors for anomalies.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider exploratory software component testing within a sandbox environment.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider replacing the software component with a more widely used alternative.",
                            "type": "fix"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30107": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": false,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that are rarely included by other public software packages.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Software developers publish components they have authored to public repositories. While a new software project is a welcome addition to the open source community. it is not always prudent to indiscriminately use the latest components when building a commercial application. Irrespective of the software quality, the danger of using components that are rarely used to build applications lies in the fact that the software component may contain novel, currently undetected malicious code. Therefore, it is prudent to review software component behaviors and even try out software component in a sandbox, an environment meant for testing untrusted code.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Check the software component behaviors for anomalies.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider exploratory software component testing within a sandbox environment.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider replacing the software component with a more widely used alternative.",
                            "type": "fix"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30108": {
        "quality": {
            "blocker": "fail",
            "effort": "high",
            "enabled": true,
            "priority": 0,
            "rl-level": 1,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "fail",
            "localization": [
                {
                    "label": "impersonated components found",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components that are impersonating popular software packages.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Software developers publish components they have authored to public repositories. Open source communities use code repositories to facilitate project discovery and simplify software deployment. These code repositories use unique component names as identifiers that developers can later use to specify software components required by their applications during the build or run processes. Since component names are manually written down by the developer within the code, it is possible to mistype them. Simple omissions of characters, such as prefixes, suffixes, plurals, hyphens, and underscores can have serious consequences. Unintended software components might get installed - components that might have been authored by a threat actor. Threat actors are constantly poisoning open source repositories with typosquatted components preying on typos by unsuspecting developers. They typically try to impersonate the most popular software components, as most developers will be using them to build their applications.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Review software component names to ensure there were no accidental package name mistypes.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software component names differ from expected, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30109": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components with dependencies that are hosted outside the official project repository.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Each of these components can have dozens, or even hundreds, of its own dependencies. When building applications, software developers download and install components from public repositories. For components to work properly, all of their dependencies also need to be installed. Some package repositories, like Node Package Manager (NPM), allow components to declare dependencies that are hosted remotely. Such dependencies are automatically downloaded from a specified location during software component installation. Since remotely hosted dependencies are not immutable, that enables a threat actor to change the dependency contents even after a component was published and vetted by security solutions. It is uncommon to find open source components that use remotely hosted dependencies residing outside the official project source code repository.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Review software component remote dependency locations.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software component resolves dependencies from unusual locations, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider vendoring the software component with all of its dependencies.",
                            "type": "fix"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30110": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components with remotely hosted binary dependencies.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Each of these components can have dozens, or even hundreds, of its own dependencies. When building applications, software developers download and install components from public repositories. For components to work properly, all of their dependencies also need to be installed. Some package repositories, like Node Package Manager (NPM), allow components to declare dependencies that are hosted remotely. Such dependencies are automatically downloaded from a specified location during software component installation. Since remotely hosted dependencies are not immutable, that enables a threat actor to change the dependency contents even after a component was published and vetted by security solutions. It is uncommon to find open source components that use remotely hosted binary dependencies.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Review software component remote dependency locations.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software component resolves dependencies from unusual locations, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider vendoring the software component with all of its dependencies.",
                            "type": "fix"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30111": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "low",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components with remotely hosted source dependencies.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Each of these components can have dozens, or even hundreds, of its own dependencies. When building applications, software developers download and install components from public repositories. For components to work properly, all of their dependencies also need to be installed. Some package repositories, like Node Package Manager (NPM), allow components to declare dependencies that are hosted remotely. Such dependencies are automatically downloaded from a specified location during software component installation. Since remotely hosted dependencies are not immutable, that enables a threat actor to change the dependency contents even after a component was published and vetted by security solutions. It is uncommon to find open source components that use remotely hosted source dependencies.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Review software component remote dependency locations.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software component resolves dependencies from unusual locations, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider vendoring the software component with all of its dependencies.",
                            "type": "fix"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30112": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components without a declared source code repository.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Open source communities depend on the work of thousands of software developers that volunteer their time to maintain software components. Software developers build up the reputation of their open source projects by developing in public. Modern source code repositories have many social features that allow software developers to handle bug reports, have discussions with their users, and convey reaching significant project milestones. It is uncommon to find open source projects that omit linking their component to a publicly accessible source code repository.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Check the software component behaviors for anomalies.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider exploratory software component testing within a sandbox environment.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider replacing the software component with a more widely used alternative.",
                            "type": "fix"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    },
    "TH30113": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "medium",
            "offline": true,
            "flags": null
        },
        "assessment": {
            "category": "tampering",
            "status": "pass",
            "localization": []
        },
        "policy": {
            "category": "hunting",
            "localization": [
                {
                    "label": "Detected presence of software components with unusual package versions.",
                    "description": "Software developers use programming and design knowledge to build reusable software components. Software components are the basic building blocks for modern applications. Software consumed by an enterprise consists of hundreds, and sometimes even thousands of open source components. Software developers publish components they have authored to public repositories. Developers that use open source components within their applications can specify the exact version of the component their application depends on. However, since components are frequently updated, some developers opt to always use the latest version of the software component. This helps reduce the number of vulnerabilities that open source components can introduce in the application. However, it does expose the developer and the build environment to risks associated with software supply chain attacks. Should a threat actor hijack the ownership of the software component publishing account, or even its publishing token, they could issue a malicious update that can infect the build environment or the application itself. To ensure that the build system updates the software component to a malicious version, threat actors often set the version number to an unusually high value. If a build system is instructed to use the latest component version, it will install the component with the highest version number, and execute its code.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Review software component versions to ensure there were no accidental code updates.",
                            "type": "investigate"
                        },
                        {
                            "content": "If the software component versions differ from expected, investigate the build and release environment for software supply chain compromise.",
                            "type": "investigate"
                        },
                        {
                            "content": "Consider pinning the software component version to prevent accidental code updates.",
                            "type": "fix"
                        },
                        {
                            "content": "Avoid using this software package until it is vetted as safe.",
                            "type": "stop"
                        }
                    ]
                }
            ]
        }
    }
}