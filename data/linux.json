{
    "SQ18101": {
        "quality": {
            "blocker": "pass",
            "effort": "low",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "baseline mitigations missing",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files that declare the stack as executable, making non-executable memory mitigations less effective.",
                    "description": "The stack is a special program segment which is writable by design, and is commonly used to store function-specific data and execution context. Granting execution privileges to the stack segment reduces application security, because it makes it possible to execute arbitrary code stored on the stack. While many modern compilers will implement a non-executable stack by default, it can be unintentionally disabled or made explicitly executable in automatically generated or misconfigured compiler options.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Enable non-executable stack mitigation with the -z noexecstack parameter during compilation.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18102": {
        "quality": {
            "blocker": "pass",
            "effort": "medium",
            "enabled": true,
            "priority": 1,
            "rl-level": null,
            "severity": "high",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "ineffective mitigations detected",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files that declare some writable segments as executable, making non-executable memory mitigations less effective.",
                    "description": "The GNU linker allows overriding its default behavior with linker scripts. This is often done in builds where the developer needs a greater amount of control over the linking process. Upon linking, default segment flags are set based on the sections. However, in linker scripts, this can be overridden via the FLAGS parameter, which allows the user to manually specify the flags for each segment. This is prevalent in automatically generated or misconfigured linker scripts. Explicitly marking the segments as both writable and executable will cause protection mitigations to become less effective, and possibly increase the chance of arbitrary code execution attacks.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "On some architectures, a read permission on a segment implies the segment is executable as well, so you should avoid declaring segments as both readable and writable.",
                            "type": "practice"
                        },
                        {
                            "content": "Disallow execution on writable memory segments.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18103": {
        "quality": {
            "blocker": "pass",
            "effort": "medium",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "high",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "ineffective mitigations detected",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files that might set writable and executable permissions to the code segment, making non-executable memory mitigations less effective.",
                    "description": "Presence of code relocations indicates that the code segment might temporarily, at one point, become both writable and executable. That violates security policies adopted by most modern Linux distributions. During the brief period in which the code segment is both writable and executable, the attacker may be able to overwrite the code with a malicious program.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Code relocations often appear due to inadequately written inline assembly, or when programs are not compiled with the appropriate position-independent code flag (e.g. -fPIC). In most cases, manual inspection may be required.",
                            "type": "investigate"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18104": {
        "quality": {
            "blocker": "pass",
            "effort": "low",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "medium",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "baseline mitigations missing",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files compiled without any kind of buffer overrun protection.",
                    "description": "Buffer overrun protection on Linux is achieved in two ways. The most common solution is to use the stack canary (also called cookie). The stack canary is a special value written onto the stack that allows the operating system to detect and terminate the program if a stack overrun occurs. In most cases, compilers will apply the stack canary conservatively in order to avoid a negative performance impact. Therefore, stack canaries are often used together with another stack overrun mitigation - fortified functions. Fortified functions are usually wrappers around standard glibc functions (such as memcpy) which perform boundary checks either at compile time or run time to determine if a memory violation has occurred. The compiler needs additional context to generate such calls (for example, array size that needs to be known at compile time). Because of this, the compiler will virtually never substitute all viable functions with their fortified counterparts in complex programs. However, when combined with the stack canary, fortified functions provide a good measure of buffer overrun protection.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "In GCC, enable fortified functions with -fstack-protector and -D_FORTIFY_SOURCE=2 flag, while using at least -O1 optimization level.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18105": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "misconfigured toolchains detected",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files compiled without any kind of buffer overrun protection while using banned string functions.",
                    "description": "Buffer overrun protection on Linux is achieved in two ways. The most common solution is to use the stack canary (also called cookie). The stack canary is a special value written onto the stack that allows the operating system to detect and terminate the program if a stack overrun occurs. In most cases, compilers will apply the stack canary conservatively in order to avoid a negative performance impact. Therefore, stack canaries are often used together with another stack overrun mitigation - fortified functions. Fortified functions are usually wrappers around standard glibc functions (such as memcpy) which perform boundary checks either at compile time or run time to determine if a memory violation has occurred. The compiler needs additional context to generate such calls (for example, array size that needs to be known at compile time). Because of this, the compiler will virtually never substitute all viable functions with their fortified counterparts in complex programs. However, when combined with the stack canary, fortified functions provide a good measure of buffer overrun protection.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Presence of unfortified string functions may indicate use of unsafe programming practices, and you should avoid it if possible.",
                            "type": "practice"
                        },
                        {
                            "content": "In GCC, enable fortified functions with -fstack-protector and -D_FORTIFY_SOURCE=2 flag, while using at least -O1 optimization level.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18106": {
        "quality": {
            "blocker": "pass",
            "effort": "high",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "misconfigured toolchains detected",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files compiled without any kind of buffer overrun protection while using banned memory functions.",
                    "description": "Buffer overrun protection on Linux is achieved in two ways. The most common solution is to use the stack canary (also called cookie). The stack canary is a special value written onto the stack that allows the operating system to detect and terminate the program if a stack overrun occurs. In most cases, compilers will apply the stack canary conservatively in order to avoid a negative performance impact. Therefore, stack canaries are often used together with another stack overrun mitigation - fortified functions. Fortified functions are usually wrappers around standard glibc functions (such as memcpy) which perform boundary checks either at compile time or run time to determine if a memory violation has occurred. The compiler needs additional context to generate such calls (for example, array size that needs to be known at compile time). Because of this, the compiler will virtually never substitute all viable functions with their fortified counterparts in complex programs. However, when combined with the stack canary, fortified functions provide a good measure of buffer overrun protection.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Presence of unfortified memory functions may indicate use of unsafe programming practices, and you should avoid it if possible.",
                            "type": "practice"
                        },
                        {
                            "content": "In GCC, enable fortified functions with -fstack-protector and -D_FORTIFY_SOURCE=2 flag, while using at least -O1 optimization level.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18107": {
        "quality": {
            "blocker": "pass",
            "effort": "medium",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "misconfigured toolchains detected",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files compiled without any kind of buffer overrun protection while using banned input functions.",
                    "description": "Buffer overrun protection on Linux is achieved in two ways. The most common solution is to use the stack canary (also called cookie). The stack canary is a special value written onto the stack that allows the operating system to detect and terminate the program if a stack overrun occurs. In most cases, compilers will apply the stack canary conservatively in order to avoid a negative performance impact. Therefore, stack canaries are often used together with another stack overrun mitigation - fortified functions. Fortified functions are usually wrappers around standard glibc functions (such as memcpy) which perform boundary checks either at compile time or run time to determine if a memory violation has occurred. The compiler needs additional context to generate such calls (for example, array size that needs to be known at compile time). Because of this, the compiler will virtually never substitute all viable functions with their fortified counterparts in complex programs. However, when combined with the stack canary, fortified functions provide a good measure of buffer overrun protection.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Presence of some input functions may indicate use of unsafe programming practices, and you should avoid it if possible.",
                            "type": "practice"
                        },
                        {
                            "content": "In GCC, enable fortified functions with -fstack-protector and -D_FORTIFY_SOURCE=2 flag, while using at least -O1 optimization level.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18108": {
        "quality": {
            "blocker": "pass",
            "effort": "medium",
            "enabled": true,
            "priority": null,
            "rl-level": null,
            "severity": "low",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "pass",
            "localization": [
                {
                    "label": "low priority mitigations absent",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files without any fortified functions.",
                    "description": "Fortified functions are usually wrappers around standard glibc functions (such as memcpy) which perform boundary checks either at compile time or run time to determine if a memory violation has occurred. The compiler needs additional context to generate such calls (for example, array size that needs to be known at compile time). Because of this, the compiler will virtually never substitute all viable functions with their fortified counterparts in complex programs. However, lack of any fortified functions may indicate that this compiler feature was not used at all.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "In GCC, you can enable fortified functions with -D_FORTIFY_SOURCE=2 flag, while using at least -O1 optimization level. ",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18109": {
        "quality": {
            "blocker": "pass",
            "effort": "medium",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "reduced effectiveness mitigations",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files that use a deprecated method to store the security cookie, making the buffer overrun vulnerability mitigation protection less effective.",
                    "description": "Stack canary is a special value written onto the stack that allows the operating system to detect and terminate the program if a stack overrun occurs. Older compilers might generate stack cookies in a way that makes it possible to determine their value, allowing the attacker to render the mitigation ineffective.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "In GCC, you can enable the stack canary with -fstack-protector-strong or -fstack-protector-all flag, but it may also be enabled by default in more recent versions of the compiler.",
                            "type": "fix"
                        },
                        {
                            "content": "Consider upgrading your compiler.",
                            "type": "update"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18110": {
        "quality": {
            "blocker": "pass",
            "effort": "medium",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "reduced effectiveness mitigations",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files that might ineffectively generate the security cookie value, making the buffer overrun vulnerability mitigation protection less effective.",
                    "description": "The stack canary is a special value written onto the stack that allows the operating system to detect and terminate the program if a stack overrun occurs. The user can override the stack canary implementation, which makes it possible for the attacker to reconstruct the canary and render the mitigation ineffective.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Good practice is to leave the stack canary implementation to the compiler, since modern compilers will take adequate measures to prevent the stack cookie from being trivially determined.",
                            "type": "practice"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18111": {
        "quality": {
            "blocker": "pass",
            "effort": "low",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "high",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "baseline mitigations missing",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files that do not implement the ASLR vulnerability mitigation protection.",
                    "description": "ASLR (address-space layout randomization) is a mitigation technique that increases the difficulty of performing buffer-overflow attacks that require the attacker to know the address of the program in memory. This is done by loading the program at a randomly selected address in the process' address space. ASLR-enabled kernels can choose a random load address only for position-independent executables and code.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "To support ASLR, the program must be compiled as position-independent code. In most compilers, this is done by passing the corresponding position-independent flag, such as -fPIC for shared libraries or -fPIE for executables.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18112": {
        "quality": {
            "blocker": "pass",
            "effort": "low",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "execution hijacking concerns",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files that were compiled without any dynamic symbol hijacking protections.",
                    "description": "On Linux, external symbols are resolved via the procedure linkage table (PLT) and the global offset table (GOT). The global offset table is split into two tables - one for external data, and one for external functions. Without any protection, both are writable at runtime and thus leave the executable vulnerable to data overwrite attacks and pointer hijacking. Data overwrite attacks can be mitigated by using partial read-only relocations, while pointer hijacking can be mitigated with full read-only relocations. Both approaches have some drawbacks. Partial read-only relocations don't provide full protection, because the external function GOT remains writable. Full read-only relocations require that all external function symbols are resolved at load-time instead of during execution. This may increase loading time for large programs.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "In most cases, it's recommended to use full read-only relocations (in GCC: -Wl,-z,relro,-z,now).",
                            "type": "fix"
                        },
                        {
                            "content": "If the executable load-time is an issue, you should use partial read-only relocations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18113": {
        "quality": {
            "blocker": "pass",
            "effort": "low",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "medium",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "execution hijacking concerns",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files that were compiled without the recommended dynamic symbol hijacking protections.",
                    "description": "On Linux, external symbols are resolved via the procedure linkage table (PLT) and the global offset table (GOT). Without any protection, both are writable at runtime and thus leave the executable vulnerable to pointer hijacking - an attack where the function address is overwritten with an address of a malicious function. Pointer hijacking can be mitigated by using full read-only relocations, which instruct the compiler to unify global offset tables into a single read-only table. This requires that all external function symbols are resolved at load-time instead of during execution, and may increase loading time for large programs.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "In most cases, it's recommended to use full read-only relocations (in GCC: -Wl,-z,relro,-z,now).",
                            "type": "fix"
                        },
                        {
                            "content": "If the executable load-time is an issue, you should use partial read-only relocations.",
                            "type": "fix"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18114": {
        "quality": {
            "blocker": "pass",
            "effort": "medium",
            "enabled": true,
            "priority": 3,
            "rl-level": null,
            "severity": "low",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "execution hijacking concerns",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files that may be susceptible to binary planting.",
                    "description": "On Linux, the user may override the normal library search path by specifying RPATH or RUNPATH. This will force the dynamic linker to prioritize user-specified directories when searching for shared libraries. Binary planting is a technique that allows the attacker to execute malicious code by placing it into one of the executable's library search directories.",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Avoid manually specifying the library search path.",
                            "type": "stop"
                        },
                        {
                            "content": "If that is not possible, ensure that the directories in customized library search path(s) are not user-writable.",
                            "type": "practice"
                        }
                    ]
                }
            ]
        }
    },
    "SQ18115": {
        "quality": {
            "blocker": "pass",
            "effort": "medium",
            "enabled": true,
            "priority": 2,
            "rl-level": null,
            "severity": "medium",
            "flags": null
        },
        "assessment": {
            "category": "hardening",
            "status": "warning",
            "localization": [
                {
                    "label": "execution hijacking concerns",
                    "language": "en-US"
                }
            ]
        },
        "policy": {
            "category": "hardening",
            "localization": [
                {
                    "label": "Detected Linux executable files that may be susceptible to binary planting while using known global or user-writable directories.",
                    "description": "On Linux, the user may override the normal library search path by specifying RPATH or RUNPATH. This will force the dynamic linker to prioritize user-specified directories when searching for shared libraries. Binary planting is a technique that allows the attacker to execute malicious code by placing it into one of the executable's library search directories. ",
                    "language": "en-US",
                    "steps": [
                        {
                            "content": "Avoid manually specifying the library search path.",
                            "type": "stop"
                        },
                        {
                            "content": "If that is not possible, avoid setting library search path(s) to directories that are typically user-writable, such as /tmp or /home.",
                            "type": "practice"
                        }
                    ]
                }
            ]
        }
    }
}